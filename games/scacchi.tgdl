game "scacchi";

players 2;

turn chess_turn
{
   phase move { }    // move a piece
   phase win_check 
   { 
      auto input player_state active { return active.player == player; }
      auto input player_state opponent { return opponent.player != player; }
      effect
      {
         // check if opponent is under check
         bool under_check = false;
         for(decimal index = 0; index < active.pieces.length; index += 1)
         {
            tile[] vision = active.pieces[index].compute_vision();
            if(vision.contains(opponent.k))
            {
               under_check = true;
               break; 
            }
         }
         opponent.under_check = under_check;

         // check if opponent has any valid move that doesn't put the king in check
         bool has_valid_move = false;
         for(decimal index = 0; index < opponent.pieces.length; index += 1)
         {
            tile[] vision = filter_illegal_vision(
               p: opponent.pieces[index], 
               current: opponent, 
               opponent: active
            );

            if(vision.length > 0)
            {
               has_valid_move = true;
               break;
            }
         }
         
         // if in check and no valid move -> win for active
         if(under_check && !has_valid_move)
         {
            winner player;
         }
         
         // trigger draw is opponet has no valid move but is not under check
         if(!under_check && !has_valid_move)
         {
            winner player, player + 1;
         }
      }
   }     

   default
   {
      if(phase == win_check)
      {
         pass player + 1 to move;
      }
      else
      {
         pass player to win_check;
      }
   }
}

tile sq
{

}

board chess_board
{
   group square grid 
   {
        sq,sq,sq,sq,sq,sq,sq,sq;
        sq,sq,sq,sq,sq,sq,sq,sq;
        sq,sq,sq,sq,sq,sq,sq,sq;
        sq,sq,sq,sq,sq,sq,sq,sq;
        sq,sq,sq,sq,sq,sq,sq,sq;
        sq,sq,sq,sq,sq,sq,sq,sq;
        sq,sq,sq,sq,sq,sq,sq,sq;
        sq,sq,sq,sq,sq,sq,sq,sq;
   } 
}

setup
{
   input board b;

   effect
   {
      player p0 = 0;
      player_state ps0 = new player_state() 
      { 
         pawn_direction = 1;
      };
      ps0.assign_to(p0);
      setup_for_player(pState: ps0, g: b.groups[0]);

      player p1 = 1;
      player_state ps1 = new player_state() 
      { 
         pawn_direction = -1;
      };
      ps1.assign_to(p1);
      setup_for_player(pState: ps1, g: b.groups[0]);
      
      // start the game by setting who starts 
      pass 0 to move;
   }
}

// used only for containing the board
global state game_state
{  
   board chess = new chess_board();
}

local state player_state
{
   decimal pawn_direction = 1; // 1 is up -1 is down
   decimal promotion_rank = 0; // 0 for white, 7 for black
   king k = new king(){ owner = this; };
   piece[] pieces = { }; // needs to be filled when instanced

   // rook references used to castle
   rook queen_rook = new rook() { owner = this; }
   rook king_rook = new rook() { owner = this; }

   bool under_check = false;


   action surrender
   {
      trigger on player choice;
      effect 
      {   
         winner this.player + 1;
      }
   }

   // ##### player pieces #####
   action move_piece
   {
      trigger on player choice;
      input piece p { return p.owner == this && p.captured == false; };
      auto input player_state opponent { return opponent != this; }
      effect
      {
         // get all the valid moves for the current piece
         tile[] vision = filter_illegal_vision(p: p, current: this, opponent: opponent)

         // if there's no possibile move -> stop action
         if(vision.length == 0)
         {
            fail;
         }

         // select move
         input tile dest 
         {
            return vision.contains(dest);
         }
         
         // if destination has enemy piece ( placeables in it ) capture it 
         if(dest.placeables.length > 1)
         {
            dest.placeables[0].captured = true;
            dest.placeables.clear();
         }
         
         move p to dest;
         
         // if a move has been found possible, the king can't be under check
         // so there is no problem in setting the under_check flag to false
         this.under_check = false;
         
         // stop castleing if rook or king moved 
         if(p is rook)
         {
            (p as rook).hasMoved = true;
         }
         else if(p is king)
         {
            (p as king).hasMoved = true;
         }
      }
   }
   
   action king_side_castle
   {
      required
      {
         // king and rook didn't move
         if(k.hasMoved || king_rook.hasMoved)
            return false;
         
         // king not in check
         if(this.under_check)
            return false;

         // no pieces can be between the king and the rook
         // tiles to check: x = 5, 6
         tile first_tile = k.tile.group[5][k.tile.y];
         tile second_tile = k.tile.group[6][k.tile.y];
         if(first_tile.placeables.length > 0 || second_tile.placeables.length > 0)
            return false;
      }
      auto input player_state opponent { return opponent != this; }
      effect
      {
         // king can't pass trough a check
         tile rook_tile = k.tile.group[5][k.tile.y];
         tile king_tile = k.tile.group[6][k.tile.y];

         vision[] opponent_vision = opponent.get_vision();
         if(opponent_vision.contains(rook_tile) || opponent_vision.contains(king_tile))
            fail "king can't pass trough a check when castleing";

         king_rook.move_to(rook_tile);
         k.move_to(king_tile);
      }
   }

   action queen_side_castle 
   {
      required
      {
         // king and rook didn't move
         if(k.hasMoved || queen_rook.hasMoved)
            return false;
         
         // king not in check
         if(this.under_check)
            return false;

         // no pieces can be between the king and the rook
         // tiles to check: x = 5, 6
         tile first_tile = k.tile.group[1][k.tile.y];
         tile second_tile = k.tile.group[2][k.tile.y];
         tile third_tile = k.tile.group[3][k.tile.y];
         if(first_tile.placeables.length > 0 || second_tile.placeables.length > 0 || third_tile.placeables.length > 0)
            return false;
      }
      auto input player_state opponent { return opponent != this; }
      effect
      {
         // king can't pass trough a check
         tile rook_tile = k.tile.group[3][k.tile.y];
         tile king_tile = k.tile.group[2][k.tile.y];

         vision[] opponent_vision = opponent.get_vision();
         if(opponent_vision.contains(rook_tile) || opponent_vision.contains(king_tile))
            fail "king can't pass trough a check when castleing";

         king_rook.move_to(rook_tile);
         k.move_to(king_tile);
      }
   }
   
   function get_vision 
   {
      returns tile[];
      effect
      {
         tile[] vision = {};
         for(decimal index = 0; index < this.pieces.length; index += 1)
         {
            if(this.pieces[index].captured)
               continue;

            vision.append(this.pieces[index].compute_vision()); 
         }

         return vision;
      }
   }
}

interactable piece placeable
{
   player_state owner = none;
   tile[] vision = {};
   bool captured = false;

   function compute_vision 
   {
      returns tile[];
   }
}

interactable rook : piece
{
   bool hasMoved = false

   override function compute_vision
   {
      override effect
      {
         tile[] vision = {};
         
         if(captured)
            return vision;

         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 1, y: 0));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: -1, y: 0));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 0, y: 1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 0, y: -1));
         return vision;
      }
   }
}

interactable bishop : piece 
{
   override function compute_vision
   {
      override effect
      {
         tile[] vision = {};
         if(captured)
            return vision;

         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 1, y: 1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 1, y: -1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: -1, y: 1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: -1, y: -1));
         return vision;
      }
   }
}

interactable king : piece 
{
   bool hasMoved = false;

   override function compute_vision
   {
      override effect 
      {
         group g = this.tile.group; 
         decimal x = this.tile.x;
         decimal y = this.tile.y;
         
         tile[] vision = {};
         if(check_vision_tile(t: g[x - 1][y - 1], this.owner)) { vision[vision.length] = g[x - 1][y - 1]; }
         if(check_vision_tile(t: g[x - 1][y - 0], this.owner)) { vision[vision.length] = g[x - 1][y - 0]; }
         if(check_vision_tile(t: g[x - 1][y + 1], this.owner)) { vision[vision.length] = g[x - 1][y + 1]; }
         if(check_vision_tile(t: g[x - 0][y - 1], this.owner)) { vision[vision.length] = g[x - 0][y - 1]; }
         if(check_vision_tile(t: g[x - 0][y + 1], this.owner)) { vision[vision.length] = g[x - 0][y + 1]; }
         if(check_vision_tile(t: g[x + 1][y - 1], this.owner)) { vision[vision.length] = g[x + 1][y - 1]; }
         if(check_vision_tile(t: g[x + 1][y - 0], this.owner)) { vision[vision.length] = g[x + 1][y - 0]; }
         if(check_vision_tile(t: g[x + 1][y + 1], this.owner)) { vision[vision.length] = g[x + 1][y + 1]; }

         return vision;
      }
   }
}

interactable queen : piece
{
   override function compute_vision
   {
      override effect
      {
         tile[] vision = {};
         if(captured)
            return vision;

         // bishop movement
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 1, y: 1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 1, y: -1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: -1, y: 1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: -1, y: -1));

         // rook movement
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 1, y: 0));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: -1, y: 0));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 0, y: 1));
         vision.append(line_till_obstruction(tile: this.tile, moving: this.owner, x: 0, y: -1));
         return vision;
      }
   }
}

interactable knight: piece
{
   override function compute_vision
   {
      override effect
      {
         group g = this.tile.group; 
         decimal x = this.tile.x;
         decimal y = this.tile.y;
         tile[] vision = {};
         if(captured)
            return vision;


         if(check_vision_tile(t: g[x - 1][y - 2], this.owner)) { vision[vision.length] = g[x - 1][y - 2]; }
         if(check_vision_tile(t: g[x + 1][y - 2], this.owner)) { vision[vision.length] = g[x + 1][y - 2]; }
         if(check_vision_tile(t: g[x - 1][y + 2], this.owner)) { vision[vision.length] = g[x - 1][y + 2]; }
         if(check_vision_tile(t: g[x + 1][y + 2], this.owner)) { vision[vision.length] = g[x + 1][y + 2]; }
         if(check_vision_tile(t: g[x + 2][y + 1], this.owner)) { vision[vision.length] = g[x + 2][y + 1]; }
         if(check_vision_tile(t: g[x + 2][y - 1], this.owner)) { vision[vision.length] = g[x + 2][y - 1]; }
         if(check_vision_tile(t: g[x - 2][y + 1], this.owner)) { vision[vision.length] = g[x - 2][y + 1]; }
         if(check_vision_tile(t: g[x - 2][y - 1], this.owner)) { vision[vision.length] = g[x - 2][y - 1]; }
         
         return vision;
      }
   }
}

interactable pawn: piece
{
   action promote
   {
      trigger on pawn move
      {
         return to.y == this.owner.promotion_rank;
      }

      effect
      {
         string[] promotion_choices = { "queen", "rook", "bishop", "knight" };
         player input string promotion_choice { return promotion_choices.contains(promotion_choice); }

         // find pawn inside the owner pieces
         decimal index = 0;
         while(index < this.owner.pieces.length)
         {
            if(this.owner.pieces[index] == this)
            {
               break;
            }
         }

         if(promotion_choice == "queen")
         {
            this.owner.pieces[index] = new queen()
            {
               owner = this.owner;
            }
         }
         else íf (promotion_choice == "bishop")
         {
            this.owner.pieces[index] = new bishop()
            {
               owner = this.owner;
            }
         }
         else if (promotion_choice == "knight")
         {
            this.owner.pieces[index] = new knight()
            {
               owner = this.owner;
            };
         }
         else
         {
            this.owner.pieces[index] = new rook()
            {
               owner = this.owner;
            }
         }

         // substitute the pawn with the promoted piece
         tile current_tile = this.tile;
         current_tile.placeables.clear();
         this.owner.pieces[index].move_to(current_tile); 
      }
   }

   override function compute_vision
   {
      override effect
      {
         group g = this.tile.group;
         decimal x = this.tile.x;
         decimal y - this.tile.y;
         decimal direction = 1 * this.owner.pawn_direction;

         tile[] vision = {};
         if(captured)
            return vision;


         // if front is clear add 
         tile front = g[x][y - direction];
         if(front.placeables.length == 0)
         {
            vision[vision.length] = front;
         }

         // add up left if there is an enemy piece
         tile left = g[x - 1][y - direction];
         if(left.placeables.length > 0 && (left.placeables[0] as piece).owner != this.owner)
         {
            vision[vision.length] = front;
         }

         // add up right if there is an enemy piece
         tile right = g[x + 1][y - direction];
         if(right.placeables.length > 0 && (right.placeables[0] as piece).owner != this.owner)
         {
            vision[vision.length] = front;
         }
         
         return vision;
      }
   }
}

// ##### HELPER VERBS ######
function filter_illegal_vision
{
   function input piece p;
   function input player_state current;
   function input player_state opponent; 
   returns tile[];
   effect
   {
      tile[] vision = p.compute_vision();  
      pieces[] enemy_pieces = opponent.pieces;

      tile prev = p.tile;
      tile[] legal_moves = {};
      for(decimal vision_index = 0; vision_index < vision.length; vision_index += 1)
      {
         // move piece and compute in_check vision
         p.move_to(vision[vision_index]);
         
         tile[] opponent_vision = opponent.get_vision();
         if(opponent_vision.contains(current.k.tile)
         {
            legal_moves[legal_moves.length] = vision[vision_index];
         }
      } 
      // restore the piece to its original tile
      p.move_to(prev);

      return legal_moves;
   }
}

function line_till_obstruction
{
   function input tile src;
   function input player_state moving;
   function input decimal x;
   function input decimal y;
   effect
   {
      group g = src.group;
      tile c = g[src.x + x][src.y + y];
      tile[] line = {};
      while(c != none && c.placeables.length == 0){
         line.add(c);
         c = g[c.x + x][c.y + y];
      }

      if(check_vision_tile(t: c, owner: moving))
      {
         line.add(c);
      }

      return line; 
   }
}

function check_vision_tile 
{
   function input tile t;
   function input player_state owner;

   effect
   {
      if(t == null)
         return false;

      if(t.placeables.length > 0)
      {
         piece p = t.placeables[0] as piece;
         return p.owner != owner;
      }
      return true;
   }
}

function setup_for_player
{
   function input player_state pState;
   funntion input group g;
   effect
   {
      pawn[] pawns = {
         new pawn() { owner = pState },
         new pawn() { owner = pState },
         new pawn() { owner = pState },
         new pawn() { owner = pState },
         new pawn() { owner = pState },
         new pawn() { owner = pState },
         new pawn() { owner = pState },
         new pawn() { owner = pState },
      }
      pState.pieces.append(pawns);

      rook[] rooks = {
         new rook() { owner = pState }, // Queen side rook
         new rook() { owner = pState }, // King side rook
      }
      pState.pieces.append(rooks);
      pState.queen_rook = rooks[0];
      pState.king_rook = rooks[1];
      
      bishop[] bishops = {
         new bishop() { owner = pState }, // Queen side bishop
         new bishop() { owner = pState }, // King side bishop
      }
      pState.pieces.append(bishops);

      knight[] knights = {
         new knight() { owner = pState }, // Queen side knight
         new knight() { owner = pState }, // King side knight
      }
      pState.pieces.append(knights);
      
      queen q = new queen() { owner = pState }
      pState.pieces[pState.pieces.length] = q;

      king k = new king() { owner = pState }
      pState.pieces[pState.pieces.length] = k;
      pState.k = k;

      decimal first_row = 7 - pState.promotion_rank;
      deciaml pawn_row = first_row - pState.pawn_direction;

      for(decimal index = 0; index < pawns.length; index += 1)
      {
         pawns[index].move_to(g[index][pawn_row]);
      }
      
      rooks[0].move_to(g[first_row][0]);
      knights[0].move_to(g[first_row][1]);
      bishops[0].move_to(g[first_row][2]);
      queen.move_to(g[first_row][3]);
      king.move_to(g[first_row][4]);
      bishops[1].move_to(g[first_row][5]);
      knights[1].move_to(g[first_row][6]);
      rooks[1].move_to(g[first_row][6]);
   }
}